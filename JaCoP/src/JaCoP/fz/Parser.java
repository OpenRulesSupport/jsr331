/* Generated By:JJTree&JavaCC: Do not edit this line. Parser.java */
package JaCoP.fz;

import java.util.ArrayList;
import JaCoP.core.Store;

public class Parser/*@bgen(jjtree)*/implements ParserTreeConstants, ParserConstants {/*@bgen(jjtree)*/
  protected JJTParserState jjtree = new JJTParserState();Store store = new Store();
    Tables dict = new Tables(store);
    VariablesParameters cg = new VariablesParameters();
    Constraints cc = new Constraints(store);
    Solve solver = new Solve(store);
    Options options;

    void setOptions(Options opt) {
        options = opt;
    }

    Store getStore() {
        return store;
    }

/************************************************************** 
*
*      GRAMMER STARTS
*
***************************************************************/

//---------------------------------------------------------------------------
// Model top-level
//---------------------------------------------------------------------------

// model          : pred_decl_items var_decl_items constraint_items model_end
  final public void model() throws ParseException {
 /*@bgen(jjtree) model */
  ASTmodel jjtn000 = new ASTmodel(this, JJTMODEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      pred_decl_items();
      var_decl_items();
      constraint_items();
      model_end();
      jj_consume_token(0);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

// pred_decl_items : pred_decl_items pred_decl_item ';'
//                 | pred_decl_items error ';' { yyerrok; }
// 		| /* empty */
  final public void pred_decl_items() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PREDICATE:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      pred_decl_item();
      jj_consume_token(SC);
    }
  }

// var_decl_items : var_decl_items var_decl_item ';'
//                | /* empty */
  final public void var_decl_items() throws ParseException {
 /*@bgen(jjtree) VarDeclItems */
  ASTVarDeclItems jjtn000 = new ASTVarDeclItems(this, JJTVARDECLITEMS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT_LITERAL:
        case FLOAT_LITERAL:
        case LB:
        case ARRAY:
        case BOOL:
        case FLOAT:
        case INT:
        case SET:
        case VAR:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        var_decl_item();
        jj_consume_token(SC);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
            //jjtThis.dump("");
            jjtn000.removeChildren();
            solver.setNumberBoolVariables(cg.numberBooleanVariables);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

// constraint_items: constraint_items constraint_item ';'
//                | /* empty */
  final public void constraint_items() throws ParseException {
 /*@bgen(jjtree) ConstraintItems */
  ASTConstraintItems jjtn000 = new ASTConstraintItems(this, JJTCONSTRAINTITEMS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONSTRAINT:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_3;
        }
        constraint_item();
        jj_consume_token(SC);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
           //jjtThis.dump("");

            cc.poseDelayedConstraints();

            jjtn000.removeChildren();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

// model_end      : solve_item ';'
//                | solve_item ';' output_item ';'
  final public void model_end() throws ParseException {
 /*@bgen(jjtree) ModelEnd */
  ASTModelEnd jjtn000 = new ASTModelEnd(this, JJTMODELEND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      solve_item();
      jj_consume_token(SC);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OUTPUT:
        output_item();
        jj_consume_token(SC);
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//---------------------------------------------------------------------------
// Items
//---------------------------------------------------------------------------

// pred_decl_item:
//     PREDICATE IDENT '(' pred_decl_args ')'
  final public void pred_decl_item() throws ParseException {
    jj_consume_token(PREDICATE);
    jj_consume_token(IDENT);
    jj_consume_token(LP);
    pred_decl_args();
    jj_consume_token(RP);
  }

// var_decl_item:
//     VAR    non_array_ti_expr_tail ':' ident_anns var_decl_item2
//   |        non_array_ti_expr_tail ':' ident_anns '=' non_array_flat_expr
//   | ARRAY '[' INT_LITERAL DOTDOT INT_LITERAL ']' OF array_decl_tail
  final public void var_decl_item() throws ParseException {
 /*@bgen(jjtree) VarDeclItem */
    ASTVarDeclItem jjtn000 = new ASTVarDeclItem(this, JJTVARDECLITEM);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t, t1, t2;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
        jj_consume_token(VAR);
        non_array_ti_expr_tail();
        jj_consume_token(COLON);
        t = ident_anns();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASGN:
          jj_consume_token(ASGN);
          non_array_flat_expr();
          break;
        default:
          jj_la1[4] = jj_gen;
          ;
        }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
            jjtn000.setKind(0); jjtn000.setId(t.image);
            cg.generateVariables(jjtn000, dict, store);
            jjtn000.removeChildren();
        break;
      case INT_LITERAL:
      case FLOAT_LITERAL:
      case LB:
      case BOOL:
      case FLOAT:
      case INT:
      case SET:
        non_array_ti_expr_tail();
        jj_consume_token(COLON);
        t = ident_anns();
        jj_consume_token(ASGN);
        non_array_flat_expr();
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
           jjtn000.setKind(1);
           jjtn000.setId(t.image);
           cg.generateParameters(jjtn000, dict);
           jjtn000.removeChildren();
        break;
      case ARRAY:
        jj_consume_token(ARRAY);
        jj_consume_token(LBOX);
        t1 = jj_consume_token(INT_LITERAL);
        jj_consume_token(DOTDOT);
        t2 = jj_consume_token(INT_LITERAL);
        jj_consume_token(RBOX);
        jj_consume_token(OF);
        array_decl_tail(jjtn000);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
              jjtn000.setIndexes(Integer.parseInt(t1.image), Integer.parseInt(t2.image));
              cg.generateArray(jjtn000, dict, store);
              jjtn000.removeChildren();
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

// var_decl_item2:
//     '=' non_array_flat_expr
//   | /*empty*/

// void var_decl_item2() :
// {}
// {
//     [ <ASGN> non_array_flat_expr() ]
// }

// array_decl_tail:
//         non_array_ti_expr_tail ':' ident_anns '=' array_literal
//   | VAR non_array_ti_expr_tail ':' ident_anns array_decl_tail2
  final public void array_decl_tail(ASTVarDeclItem v) throws ParseException {
 Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT_LITERAL:
    case FLOAT_LITERAL:
    case LB:
    case BOOL:
    case FLOAT:
    case INT:
    case SET:
      non_array_ti_expr_tail();
      jj_consume_token(COLON);
      t = ident_anns();
      jj_consume_token(ASGN);
      array_literal();
      v.setKind(3);
      break;
    case VAR:
      jj_consume_token(VAR);
      non_array_ti_expr_tail();
      jj_consume_token(COLON);
      t = ident_anns();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASGN:
        jj_consume_token(ASGN);
        array_literal();
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
          v.setKind(2);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         v.setId(t.image);
  }

// array_decl_tail2:
//     '=' array_literal
//   | /*empty*/

// void array_decl_tail2() :
// {}
// {
//     [ <ASGN> array_literal() ]
// }

// ident_anns:
//     IDENT annotations
  final public Token ident_anns() throws ParseException {
 Token t;
    t = jj_consume_token(IDENT);
    annotations();
         {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

// constraint_item:
//     CONSTRAINT constraint_elem annotations
  final public void constraint_item() throws ParseException {
 /*@bgen(jjtree) Constraint */
  ASTConstraint jjtn000 = new ASTConstraint(this, JJTCONSTRAINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CONSTRAINT);
      constraint_elem();
      annotations();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

// constraint_elem:
//     IDENT '(' flat_exprs ')'
// |   variable_expr
  final public void constraint_elem() throws ParseException {
 /*@bgen(jjtree) ConstElem */
 ASTConstElem jjtn000 = new ASTConstElem(this, JJTCONSTELEM);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      if (jj_2_1(2)) {
        t = jj_consume_token(IDENT);
        jj_consume_token(LP);
        flat_exprs();
        jj_consume_token(RP);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
     jjtn000.setName(t.image);
     cc.generateConstraints(jjtn000, dict);
     jjtn000.removeChildren();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
          variable_expr();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        cc.generateVarConstraint(jjtn000, dict);
        jjtn000.removeChildren();
          break;
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

// solve_item:
//     SOLVE annotations solve_kind
  final public void solve_item() throws ParseException {
 /*@bgen(jjtree) SolveItem */
  ASTSolveItem jjtn000 = new ASTSolveItem(this, JJTSOLVEITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SOLVE);
      annotations();
      solve_kind();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
            solver.search(jjtn000, dict, options);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

// solve_kind:
//     SATISFY
//   | MINIMIZE solve_expr
//   | MAXIMIZE solve_expr
  final public void solve_kind() throws ParseException {
 /*@bgen(jjtree) SolveKind */
 ASTSolveKind jjtn000 = new ASTSolveKind(this, JJTSOLVEKIND);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SATISFY:
        t = jj_consume_token(SATISFY);
        break;
      case MINIMIZE:
        t = jj_consume_token(MINIMIZE);
        solve_expr();
        break;
      case MAXIMIZE:
        t = jj_consume_token(MAXIMIZE);
        solve_expr();
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         jjtn000.setKind(t.image);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

// output_item:
//     OUTPUT '[' output_elems ']'
  final public void output_item() throws ParseException {
    jj_consume_token(OUTPUT);
    jj_consume_token(LBOX);
    output_elems();
    jj_consume_token(RBOX);
  }

// output_elems:
//     output_elem ',' output_elems
//   | output_elem
  final public void output_elems() throws ParseException {
    output_elem();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMMA);
      output_elem();
    }
  }

// output_elem:
//     SHOW '(' flat_expr ')'
//   | SHOW_COND '(' flat_expr ',' flat_expr ',' flat_expr ')'
//   | STRING_LITERAL
  final public void output_elem() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SHOW:
      jj_consume_token(SHOW);
      jj_consume_token(LP);
      flat_expr();
      jj_consume_token(RP);
      break;
    case SHOW_COND:
      jj_consume_token(SHOW_COND);
      jj_consume_token(LP);
      flat_expr();
      jj_consume_token(COMMA);
      flat_expr();
      jj_consume_token(COMMA);
      flat_expr();
      jj_consume_token(RP);
      break;
    case STRING_LITERAL:
      jj_consume_token(STRING_LITERAL);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//---------------------------------------------------------------------------
// Predicate parameters
//---------------------------------------------------------------------------

// pred_decl_args:
//     pred_decl_arg "," pred_decl_args
//   | pred_decl_arg
  final public void pred_decl_args() throws ParseException {
    pred_decl_arg();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_5;
      }
      jj_consume_token(COMMA);
      pred_decl_arg();
    }
  }

// pred_decl_arg:
//      non_array_ti_expr_tail ':' IDENT
//    | VAR non_array_ti_expr_tail ':' IDENT
//    | ARRAY '[' pred_arg_array_index ']' OF  pred_arg_array_tail ':' IDENT
  final public void pred_decl_arg() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT_LITERAL:
    case FLOAT_LITERAL:
    case LB:
    case BOOL:
    case FLOAT:
    case INT:
    case SET:
      non_array_ti_expr_tail();
      jj_consume_token(COLON);
      jj_consume_token(IDENT);
      break;
    case VAR:
      jj_consume_token(VAR);
      non_array_ti_expr_tail();
      jj_consume_token(COLON);
      jj_consume_token(IDENT);
      break;
    case ARRAY:
      jj_consume_token(ARRAY);
      jj_consume_token(LBOX);
      pred_arg_array_index();
      jj_consume_token(RBOX);
      jj_consume_token(OF);
      pred_arg_array_tail();
      jj_consume_token(COLON);
      jj_consume_token(IDENT);
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// pred_arg_array_index:
//     INT
//   | INT_LITERAL DOTDOT INT_LITERAL
  final public void pred_arg_array_index() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      jj_consume_token(INT);
      break;
    case INT_LITERAL:
      jj_consume_token(INT_LITERAL);
      jj_consume_token(DOTDOT);
      jj_consume_token(INT_LITERAL);
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// pred_arg_array_tail:
//     non_array_ti_expr_tail
//   | VAR non_array_ti_expr_tail
  final public void pred_arg_array_tail() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT_LITERAL:
    case FLOAT_LITERAL:
    case LB:
    case BOOL:
    case FLOAT:
    case INT:
    case SET:
      non_array_ti_expr_tail();
      break;
    case VAR:
      jj_consume_token(VAR);
      non_array_ti_expr_tail();
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//---------------------------------------------------------------------------
// Type-Inst Expression Tails
//---------------------------------------------------------------------------

// non_array_ti_expr_tail:
//     scalar_ti_expr_tail
//   | set_ti_expr_tail
  final public void non_array_ti_expr_tail() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT_LITERAL:
    case FLOAT_LITERAL:
    case LB:
    case BOOL:
    case FLOAT:
    case INT:
      scalar_ti_expr_tail();
      break;
    case SET:
      set_ti_expr_tail();
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// scalar_ti_expr_tail:
//     bool_ti_expr_tail
//   | int_ti_expr_tail
//   | float_ti_expr_tail
  final public void scalar_ti_expr_tail() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOL:
      bool_ti_expr_tail();
      break;
    case INT_LITERAL:
    case LB:
    case INT:
      int_ti_expr_tail();
      break;
    case FLOAT_LITERAL:
    case FLOAT:
      float_ti_expr_tail();
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// bool_ti_expr_tail:
//     BOOL
  final public void bool_ti_expr_tail() throws ParseException {
 /*@bgen(jjtree) BoolTiExprTail */
  ASTBoolTiExprTail jjtn000 = new ASTBoolTiExprTail(this, JJTBOOLTIEXPRTAIL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(BOOL);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

// int_ti_expr_tail:
//     INT
//   | INT_LITERAL DOTDOT INT_LITERAL
//   | '{' int_literals '}'
  final public void int_ti_expr_tail() throws ParseException {
 /*@bgen(jjtree) IntTiExprTail */
    ASTIntTiExprTail jjtn000 = new ASTIntTiExprTail(this, JJTINTTIEXPRTAIL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);//type 0=int; 1=interval; 2=list; 
    Token t1, t2;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        jj_consume_token(INT);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
           jjtn000.setType(0);
        break;
      case INT_LITERAL:
        t1 = jj_consume_token(INT_LITERAL);
        jj_consume_token(DOTDOT);
        t2 = jj_consume_token(INT_LITERAL);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
              jjtn000.setType(1);
              jjtn000.setLowHigh(Integer.parseInt(t1.image), Integer.parseInt(t2.image));
        break;
      case LB:
        jj_consume_token(LB);
        int_literals();
        jj_consume_token(RB);
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
            jjtn000.setType(2);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

// float_ti_expr_tail:
//     FLOAT
//   | FLOAT_LITERAL DOTDOT FLOAT_LITERAL
  final public void float_ti_expr_tail() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FLOAT:
      jj_consume_token(FLOAT);
      break;
    case FLOAT_LITERAL:
      jj_consume_token(FLOAT_LITERAL);
      jj_consume_token(DOTDOT);
      jj_consume_token(FLOAT_LITERAL);
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          System.err.println("Float not supported; compilation aborted."); System.exit(0);
  }

// set_ti_expr_tail:
//     SET OF scalar_ti_expr_tail
  final public void set_ti_expr_tail() throws ParseException {
 /*@bgen(jjtree) SetTiExprTail */
  ASTSetTiExprTail jjtn000 = new ASTSetTiExprTail(this, JJTSETTIEXPRTAIL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SET);
      jj_consume_token(OF);
      scalar_ti_expr_tail();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//---------------------------------------------------------------------------
// Expressions
//---------------------------------------------------------------------------

// ann_exprs:
//     ann_expr ',' ann_exprs
//   | ann_expr
  final public void ann_exprs() throws ParseException {
    ann_expr();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_6;
      }
      jj_consume_token(COMMA);
      ann_expr();
    }
  }

// ann_expr:
//     IDENT '(' ann_exprs ')'
//   | flat_expr
  final public void ann_expr() throws ParseException {
 /*@bgen(jjtree) AnnExpr */
 ASTAnnExpr jjtn000 = new ASTAnnExpr(this, JJTANNEXPR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      if (jj_2_2(2)) {
        t = jj_consume_token(IDENT);
        jj_consume_token(LP);
        ann_exprs();
        jj_consume_token(RP);
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
       jjtn000.setIdent(t.image);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING_LITERAL:
        case INT_LITERAL:
        case FLOAT_LITERAL:
        case LBOX:
        case LB:
        case FALSE:
        case TRUE:
        case IDENT:
          flat_expr();
          break;
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

// flat_exprs:
//     flat_expr ',' flat_exprs
//   | flat_expr
  final public void flat_exprs() throws ParseException {
    flat_expr();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_7;
      }
      jj_consume_token(COMMA);
      flat_expr();
    }
  }

// flat_expr:
//     non_array_flat_expr
//   | array_literal
  final public void flat_expr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_LITERAL:
    case INT_LITERAL:
    case FLOAT_LITERAL:
    case LB:
    case FALSE:
    case TRUE:
    case IDENT:
      non_array_flat_expr();
      break;
    case LBOX:
      array_literal();
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// non_array_flat_exprs:
//     non_array_flat_expr ',' non_array_flat_exprs
//   | non_array_flat_expr
  final public void non_array_flat_exprs() throws ParseException {
    non_array_flat_expr();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_8;
      }
      jj_consume_token(COMMA);
      non_array_flat_expr();
    }
  }

// non_array_flat_expr:
//     scalar_flat_expr
//   | set_literal
  final public void non_array_flat_expr() throws ParseException {
    if (jj_2_3(3)) {
      set_literal();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_LITERAL:
      case INT_LITERAL:
      case FLOAT_LITERAL:
      case FALSE:
      case TRUE:
      case IDENT:
        scalar_flat_expr();
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

// scalar_flat_exprs:
//     scalar_flat_expr ',' scalar_flat_exprs
//   | scalar_flat_expr
  final public void scalar_flat_exprs() throws ParseException {
    scalar_flat_expr();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_9;
      }
      jj_consume_token(COMMA);
      scalar_flat_expr();
    }
  }

// scalar_flat_expr:
//     IDENT
//   | array_access_expr
//   | bool_literal
//   | INT_LITERAL
//   | FLOAT_LITERAL
//   | STRING_LITERAL
  final public void scalar_flat_expr() throws ParseException {
 /*@bgen(jjtree) ScalarFlatExpr */
 ASTScalarFlatExpr jjtn000 = new ASTScalarFlatExpr(this, JJTSCALARFLATEXPR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    // type = 0-int; 1=bool; 2=ident; 3= array_access; 4=string; 5=float;
    ArrayAccess aa;
    try {
      if (jj_2_4(2)) {
        aa = array_access_expr();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.setType(3);
          jjtn000.setIdent(aa.getIdent());
          jjtn000.setInt(aa.getIndex());
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
          t = jj_consume_token(IDENT);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.setType(2); jjtn000.setIdent(t.image);
          break;
        case FALSE:
        case TRUE:
          t = bool_literal();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.setType(1);
          int val = Boolean.parseBoolean(t.image)==true?1:0;
          jjtn000.setInt(val);
          break;
        case INT_LITERAL:
          t = jj_consume_token(INT_LITERAL);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                          jjtn000.setType(0); jjtn000.setInt(Integer.parseInt(t.image));
          break;
        case FLOAT_LITERAL:
          t = jj_consume_token(FLOAT_LITERAL);
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                            jjtn000.setType(5);
          break;
        case STRING_LITERAL:
          t = jj_consume_token(STRING_LITERAL);
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                             jjtn000.setType(4);
          break;
        default:
          jj_la1[27] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

// int_flat_expr:
//     IDENT
//   | array_access_expr
//   | INT_LITERAL
  final public void int_flat_expr() throws ParseException {
 /*@bgen(jjtree) IntFlatExpr */
     ASTIntFlatExpr jjtn000 = new ASTIntFlatExpr(this, JJTINTFLATEXPR);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);Token t;
    ArrayAccess aa;
    try {
      if (jj_2_5(2)) {
        jj_consume_token(IDENT);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
          aa = array_access_expr();
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
         int[] intArray = dict.getIntArray(aa.getIdent());
         if (intArray != null) {
             int value = intArray[aa.getIndex() - 1];
             jjtn000.setInt(value);
         }
         else
             System.err.println("Cannot find value for "+aa); System.exit(0);
          break;
        case INT_LITERAL:
          t = jj_consume_token(INT_LITERAL);
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                        jjtn000.setInt(Integer.parseInt(t.image));
          break;
        default:
          jj_la1[28] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

// variable_expr:
//     IDENT
//   | array_access_expr
  final public void variable_expr() throws ParseException {
 /*@bgen(jjtree) VariableExpr */
     ASTVariableExpr jjtn000 = new ASTVariableExpr(this, JJTVARIABLEEXPR);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);Token t;
     ArrayAccess aa=null;
    try {
      if (jj_2_6(2)) {
        aa = array_access_expr();
                                   jjtree.closeNodeScope(jjtn000, true);
                                   jjtc000 = false;
                                  jjtn000.setArrayAccess(aa);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
          t = jj_consume_token(IDENT);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                   jjtn000.setIdent(t.image);
          break;
        default:
          jj_la1[29] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

// solve_expr:
//     IDENT
//   | array_access_expr
//   | IDENT '(' flat_exprs ')'
  final public void solve_expr() throws ParseException {
 /*@bgen(jjtree) SolveExpr */
    ASTSolveExpr jjtn000 = new ASTSolveExpr(this, JJTSOLVEEXPR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    ArrayAccess aa;
    try {
      if (jj_2_7(2)) {
        aa = array_access_expr();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         jjtn000.setType(1); jjtn000.setIdent(aa.getIdent()); jjtn000.setIndex(aa.getIndex());
      } else if (jj_2_8(2)) {
        jj_consume_token(IDENT);
        jj_consume_token(LP);
        flat_exprs();
        jj_consume_token(RP);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
          t = jj_consume_token(IDENT);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         jjtn000.setType(0); jjtn000.setIdent(t.image);
          break;
        default:
          jj_la1[30] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

// array_access_expr:
//     IDENT '[' int_index_expr ']'
  final public ArrayAccess array_access_expr() throws ParseException {
 Token t;
    String ident;
    int index;
    t = jj_consume_token(IDENT);
    jj_consume_token(LBOX);
    index = int_index_expr();
    jj_consume_token(RBOX);
          ident = t.image;
      {if (true) return new ArrayAccess(ident, index);}
    throw new Error("Missing return statement in function");
  }

// int_index_expr:
//     IDENT
//   | INT_LITERAL
  final public int int_index_expr() throws ParseException {
    Token t;
    int i=-1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
      t = jj_consume_token(IDENT);
          String ident = t.image;
          i = dict.getInt(ident);
          {if (true) return i;}
      break;
    case INT_LITERAL:
      t = jj_consume_token(INT_LITERAL);
                           i = Integer.parseInt(t.image) - 1; /* -1 since java starts arrays from 0 not 1 */
         {if (true) return i;}
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// bool_literal:
//     FALSE
//   | TRUE
  final public Token bool_literal() throws ParseException {
 Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
      t = jj_consume_token(FALSE);
      break;
    case TRUE:
      t = jj_consume_token(TRUE);
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

// int_literals:
//     INT_LITERAL ',' int_literals
//   | INT_LITERAL
  final public void int_literals() throws ParseException {
 /*@bgen(jjtree) IntLiterals */
ASTIntLiterals jjtn000 = new ASTIntLiterals(this, JJTINTLITERALS);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token t;
ArrayList<Integer> l = new ArrayList<Integer>();
    try {
      t = jj_consume_token(INT_LITERAL);
                      l.add(Integer.parseInt(t.image));
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[33] = jj_gen;
          break label_10;
        }
        jj_consume_token(COMMA);
        t = jj_consume_token(INT_LITERAL);
                                   l.add(Integer.parseInt(t.image));
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         jjtn000.setList(l);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

// set_literal:
//     '{' scalar_flat_exprs '}'
//   | '{' '}'
//   | int_flat_expr DOTDOT int_flat_expr
  final public void set_literal() throws ParseException {
 /*@bgen(jjtree) SetLiteral */
  ASTSetLiteral jjtn000 = new ASTSetLiteral(this, JJTSETLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LB:
        jj_consume_token(LB);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING_LITERAL:
        case INT_LITERAL:
        case FLOAT_LITERAL:
        case FALSE:
        case TRUE:
        case IDENT:
          scalar_flat_exprs();
          break;
        default:
          jj_la1[34] = jj_gen;
          ;
        }
        jj_consume_token(RB);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         jjtn000.setType(1);
        break;
      case INT_LITERAL:
      case IDENT:
        int_flat_expr();
        jj_consume_token(DOTDOT);
        int_flat_expr();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         jjtn000.setType(0);
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

// array_literal:
//     '[' non_array_flat_exprs ']'
//   | '[' ']'
  final public void array_literal() throws ParseException {
 /*@bgen(jjtree) ArrayLiteral */
  ASTArrayLiteral jjtn000 = new ASTArrayLiteral(this, JJTARRAYLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LBOX);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_LITERAL:
      case INT_LITERAL:
      case FLOAT_LITERAL:
      case LB:
      case FALSE:
      case TRUE:
      case IDENT:
        non_array_flat_exprs();
        break;
      default:
        jj_la1[36] = jj_gen;
        ;
      }
      jj_consume_token(RBOX);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//---------------------------------------------------------------------------
// Annotations
//---------------------------------------------------------------------------

// annotations:
//     COLONCOLON annotation annotations
//   | /* empty */
  final public void annotations() throws ParseException {
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLONCOLON:
        ;
        break;
      default:
        jj_la1[37] = jj_gen;
        break label_11;
      }
      jj_consume_token(COLONCOLON);
      annotation();
    }
  }

// annotation:
//     IDENT '(' ann_exprs ')'
//   | IDENT
  final public void annotation() throws ParseException {
 /*@bgen(jjtree) Annotation */
 ASTAnnotation jjtn000 = new ASTAnnotation(this, JJTANNOTATION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      if (jj_2_9(5)) {
        t = jj_consume_token(IDENT);
        jj_consume_token(LP);
        ann_exprs();
        jj_consume_token(RP);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         jjtn000.setId(t.image);
      } else if (jj_2_10(2)) {
        // addition to accept seq_search([ int_search(....
                 t = jj_consume_token(IDENT);
        jj_consume_token(LP);
        jj_consume_token(LBOX);
        annotation();
        label_12:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[38] = jj_gen;
            break label_12;
          }
          jj_consume_token(COMMA);
          annotation();
        }
        jj_consume_token(RBOX);
        jj_consume_token(RP);
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
          jjtn000.setId(t.image);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
          t = jj_consume_token(IDENT);
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
          jjtn000.setId(t.image);
          break;
        default:
          jj_la1[39] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_3R_14() {
    if (jj_scan_token(IDENT)) return true;
    if (jj_scan_token(LBOX)) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_3R_27()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_28()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(IDENT)) return true;
    if (jj_scan_token(LP)) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(IDENT)) return true;
    if (jj_scan_token(LP)) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_scan_token(LBOX)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_43()) jj_scanpos = xsp;
    if (jj_scan_token(RBOX)) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) return true;
    }
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_3R_21()) return true;
    if (jj_scan_token(DOTDOT)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_scan_token(LB)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_20()) jj_scanpos = xsp;
    if (jj_scan_token(RB)) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_3R_37()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_45()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) return true;
    }
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) return true;
    }
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_scan_token(INT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) return true;
    }
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(IDENT)) return true;
    if (jj_scan_token(LP)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_scan_token(FLOAT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) return true;
    }
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_scan_token(INT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_scan_token(INT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_3R_18()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_19()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(IDENT)) return true;
    if (jj_scan_token(LP)) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_scan_token(IDENT)) return true;
    if (jj_scan_token(LP)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3R_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) return true;
    }
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[40];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40000000,0x3320300,0x400000,0x20000000,0x80000,0x3320300,0x80000,0x3220300,0x0,0x8c000000,0x1000,0x80,0x1000,0x3320300,0x2000100,0x3220300,0x3220300,0x3220300,0x2020100,0x1000200,0x1000,0x828380,0x1000,0x828380,0x1000,0x800380,0x1000,0x800380,0x100,0x0,0x0,0x100,0x800000,0x1000,0x800380,0x20100,0x820380,0x0,0x1000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x21,0x0,0x0,0x0,0x21,0x0,0x21,0x100,0x0,0x0,0x6,0x0,0x21,0x0,0x21,0x1,0x0,0x0,0x0,0x0,0x110,0x0,0x110,0x0,0x110,0x0,0x110,0x100,0x100,0x100,0x100,0x10,0x0,0x110,0x100,0x110,0x80,0x0,0x100,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[10];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[41];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 40; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 41; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 10; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
