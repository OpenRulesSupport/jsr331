var 1..16: INT____1 :: is_defined_var :: var_is_introduced;
var 1..16: INT____11 :: is_defined_var :: var_is_introduced;
var 1..16: INT____3 :: is_defined_var :: var_is_introduced;
var 1..16: INT____5 :: is_defined_var :: var_is_introduced;
var 1..16: INT____7 :: is_defined_var :: var_is_introduced;
var 1..16: INT____9 :: is_defined_var :: var_is_introduced;
array [1..16] of var 0..3: golfer_golfer_round :: output_array([1..4, 1..4]);
array [1..12] of var 1..4: round_place_golfer :: output_array([1..3, 1..4]);
constraint array_var_int_element(INT____1, golfer_golfer_round, 1);
constraint array_var_int_element(INT____11, golfer_golfer_round, 3);
constraint array_var_int_element(INT____3, golfer_golfer_round, 1);
constraint array_var_int_element(INT____5, golfer_golfer_round, 2);
constraint array_var_int_element(INT____7, golfer_golfer_round, 2);
constraint array_var_int_element(INT____9, golfer_golfer_round, 3);
constraint int_lin_eq([-1, 4, 1], [INT____1, round_place_golfer[1], round_place_golfer[2]], 4) :: defines_var(INT____1) :: domain;
constraint int_lin_eq([-1, 4, 1], [INT____11, round_place_golfer[11], round_place_golfer[12]], 4) :: defines_var(INT____11) :: domain;
constraint int_lin_eq([-1, 4, 1], [INT____3, round_place_golfer[3], round_place_golfer[4]], 4) :: defines_var(INT____3) :: domain;
constraint int_lin_eq([-1, 4, 1], [INT____5, round_place_golfer[5], round_place_golfer[6]], 4) :: defines_var(INT____5) :: domain;
constraint int_lin_eq([-1, 4, 1], [INT____7, round_place_golfer[7], round_place_golfer[8]], 4) :: defines_var(INT____7) :: domain;
constraint int_lin_eq([-1, 4, 1], [INT____9, round_place_golfer[9], round_place_golfer[10]], 4) :: defines_var(INT____9) :: domain;
constraint int_lt(round_place_golfer[1], round_place_golfer[2]);
constraint int_lt(round_place_golfer[3], round_place_golfer[4]);
constraint int_lt(round_place_golfer[5], round_place_golfer[6]);
constraint int_lt(round_place_golfer[7], round_place_golfer[8]);
constraint int_lt(round_place_golfer[9], round_place_golfer[10]);
constraint int_lt(round_place_golfer[11], round_place_golfer[12]);
constraint int_ne(round_place_golfer[1], round_place_golfer[2]);
constraint int_ne(round_place_golfer[1], round_place_golfer[3]);
constraint int_ne(round_place_golfer[1], round_place_golfer[4]);
constraint int_ne(round_place_golfer[2], round_place_golfer[3]);
constraint int_ne(round_place_golfer[2], round_place_golfer[4]);
constraint int_ne(round_place_golfer[3], round_place_golfer[4]);
constraint int_ne(round_place_golfer[5], round_place_golfer[6]);
constraint int_ne(round_place_golfer[5], round_place_golfer[7]);
constraint int_ne(round_place_golfer[5], round_place_golfer[8]);
constraint int_ne(round_place_golfer[6], round_place_golfer[7]);
constraint int_ne(round_place_golfer[6], round_place_golfer[8]);
constraint int_ne(round_place_golfer[7], round_place_golfer[8]);
constraint int_ne(round_place_golfer[9], round_place_golfer[10]);
constraint int_ne(round_place_golfer[9], round_place_golfer[11]);
constraint int_ne(round_place_golfer[9], round_place_golfer[12]);
constraint int_ne(round_place_golfer[10], round_place_golfer[11]);
constraint int_ne(round_place_golfer[10], round_place_golfer[12]);
constraint int_ne(round_place_golfer[11], round_place_golfer[12]);
solve :: int_search([round_place_golfer[1], round_place_golfer[2], round_place_golfer[3], round_place_golfer[4], round_place_golfer[5], round_place_golfer[6], round_place_golfer[7], round_place_golfer[8], round_place_golfer[9], round_place_golfer[10], round_place_golfer[11], round_place_golfer[12]], first_fail, indomain_min, complete) satisfy;
