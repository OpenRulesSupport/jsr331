var 0..15: INT____1 :: is_defined_var :: var_is_introduced;
var 0..16: INT____2 :: is_defined_var :: var_is_introduced;
var 0..16: INT____3 :: is_defined_var :: var_is_introduced;
var 0..16: INT____4 :: is_defined_var :: var_is_introduced;
var 0..16: INT____5 :: is_defined_var :: var_is_introduced;
var 1..16: INT____6 :: is_defined_var :: var_is_introduced;
array [1..6] of var 0..16: differences = [INT____1, INT____2, INT____3, INT____4, INT____5, INT____6];
array [1..4] of var 0..16: mark :: output_array([1..4]);
constraint int_eq(mark[1], 0);
constraint int_lin_eq([-1, -1, 1], [INT____1, mark[1], mark[2]], 0) :: defines_var(INT____1);
constraint int_lin_eq([-1, -1, 1], [INT____2, mark[1], mark[3]], 0) :: defines_var(INT____2);
constraint int_lin_eq([-1, -1, 1], [INT____3, mark[1], mark[4]], 0) :: defines_var(INT____3);
constraint int_lin_eq([-1, -1, 1], [INT____4, mark[2], mark[3]], 0) :: defines_var(INT____4);
constraint int_lin_eq([-1, -1, 1], [INT____5, mark[2], mark[4]], 0) :: defines_var(INT____5);
constraint int_lin_eq([-1, -1, 1], [INT____6, mark[3], mark[4]], 0) :: defines_var(INT____6);
constraint int_lt(INT____1, INT____6);
constraint int_lt(mark[1], mark[2]);
constraint int_lt(mark[2], mark[3]);
constraint int_lt(mark[3], mark[4]);
constraint int_ne(INT____1, INT____2);
constraint int_ne(INT____1, INT____3);
constraint int_ne(INT____1, INT____4);
constraint int_ne(INT____1, INT____5);
constraint int_ne(INT____1, INT____6);
constraint int_ne(INT____2, INT____3);
constraint int_ne(INT____2, INT____4);
constraint int_ne(INT____2, INT____5);
constraint int_ne(INT____2, INT____6);
constraint int_ne(INT____3, INT____4);
constraint int_ne(INT____3, INT____5);
constraint int_ne(INT____3, INT____6);
constraint int_ne(INT____4, INT____5);
constraint int_ne(INT____4, INT____6);
constraint int_ne(INT____5, INT____6);
solve :: int_search(mark, input_order, indomain, complete) minimize mark[4];
