package com.quantego.clp;
import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.Pointer;
import org.bridj.ann.Library;
import org.bridj.ann.Name;
import org.bridj.ann.Runtime;
/**
 * Wrapper for library <b>Clp.1.13.9</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("Clp")
@Runtime(CRuntime.class) 
class CLPNative {
	static {
		BridJ.register();
	}
	
	/**
	 * Original signature : <code>char* Clp_Version()</code><br>
	 * <i>native declaration : line 40</i>
	 */
	@Name("Clp_Version") 
	public static native Pointer<Byte> clpVersion();
	/**
	 * Original signature : <code>int Clp_VersionMajor()</code><br>
	 * <i>native declaration : line 42</i>
	 */
	@Name("Clp_VersionMajor") 
	public static native int clpVersionMajor();
	/**
	 * Original signature : <code>int Clp_VersionMinor()</code><br>
	 * <i>native declaration : line 44</i>
	 */
	@Name("Clp_VersionMinor") 
	public static native int clpVersionMinor();
	/**
	 * Original signature : <code>int Clp_VersionRelease()</code><br>
	 * <i>native declaration : line 46</i>
	 */
	@Name("Clp_VersionRelease") 
	public static native int clpVersionRelease();
	/**
	 * Original signature : <code>Clp_Simplex* Clp_newModel()</code><br>
	 * <i>native declaration : line 64</i>
	 */
	@Name("Clp_newModel") 
	public static native Pointer<CLPSimplex> clpNewModel();
	/**
	 * Original signature : <code>void Clp_deleteModel(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 66</i>
	 */
	@Name("Clp_deleteModel") 
	public static native void clpDeleteModel(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>Clp_Solve* ClpSolve_new()</code><br>
	 * <i>native declaration : line 68</i>
	 */
	@Name("ClpSolve_new") 
	public static native Pointer<CLPSolve> clpSolveNew();
	/**
	 * Original signature : <code>void ClpSolve_delete(Clp_Solve*)</code><br>
	 * <i>native declaration : line 70</i>
	 */
	@Name("ClpSolve_delete") 
	public static native void clpSolveDelete(Pointer<CLPSolve> solve);
	/**
	 * Original signature : <code>void Clp_loadProblem(Clp_Simplex*, const int, const int, const CoinBigIndex*, const int*, const double*, const double*, const double*, const double*, const double*, const double*)</code><br>
	 * <i>native declaration : line 88</i>
	 */
	@Name("Clp_loadProblem") 
	public static native void clpLoadProblem(Pointer<CLPSimplex> model, int numcols, int numrows, Pointer<Integer> start, Pointer<Integer> index, Pointer<Double> value, Pointer<Double> collb, Pointer<Double> colub, Pointer<Double> obj, Pointer<Double> rowlb, Pointer<Double> rowub);
	/**
	 * Original signature : <code>COINLINKAGE Clp_loadQuadraticObjective(Clp_Simplex*, const int, const CoinBigIndex*, const int*, const double*)</code><br>
	 * <i>native declaration : line 96</i>
	 */
	@Name("Clp_loadQuadraticObjective") 
	public static native void clpLoadQuadraticObjective(Pointer<CLPSimplex> model, int numberColumns, Pointer<Integer> start, Pointer<Integer> column, Pointer<Double> element);
	/**
	 * Original signature : <code>int Clp_readMps(Clp_Simplex*, const char*, int, int)</code><br>
	 * <i>native declaration : line 103</i>
	 */
	@Name("Clp_readMps") 
	public static native int clpReadMps(Pointer<CLPSimplex> model, Pointer<Byte> filename, int keepNames, int ignoreErrors);
	/**
	 * Original signature : <code>void Clp_copyInIntegerInformation(Clp_Simplex*, const char*)</code><br>
	 * <i>native declaration : line 107</i>
	 */
	@Name("Clp_copyInIntegerInformation") 
	public static native void clpCopyInIntegerInformation(Pointer<CLPSimplex> model, Pointer<Byte> information);
	/**
	 * Original signature : <code>void Clp_deleteIntegerInformation(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 109</i>
	 */
	@Name("Clp_deleteIntegerInformation") 
	public static native void clpDeleteIntegerInformation(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>void Clp_resize(Clp_Simplex*, int, int)</code><br>
	 * <i>native declaration : line 111</i>
	 */
	@Name("Clp_resize") 
	public static native void clpResize(Pointer<CLPSimplex> model, int newNumberRows, int newNumberColumns);
	/**
	 * Original signature : <code>void Clp_deleteRows(Clp_Simplex*, int, const int*)</code><br>
	 * <i>native declaration : line 113</i>
	 */
	@Name("Clp_deleteRows") 
	public static native void clpDeleteRows(Pointer<CLPSimplex> model, int number, Pointer<Integer> which);
	/**
	 * Original signature : <code>void Clp_addRows(Clp_Simplex*, int, const double*, const double*, const int*, const int*, const double*)</code><br>
	 * <i>native declaration : line 115</i>
	 */
	@Name("Clp_addRows") 
	public static native void clpAddRows(Pointer<CLPSimplex> model, int number, Pointer<Double> rowLower, Pointer<Double> rowUpper, Pointer<Integer> rowStarts, Pointer<Integer> columns, Pointer<Double> elements);
	/**
	 * Original signature : <code>void Clp_deleteColumns(Clp_Simplex*, int, const int*)</code><br>
	 * <i>native declaration : line 121</i>
	 */
	@Name("Clp_deleteColumns") 
	public static native void clpDeleteColumns(Pointer<CLPSimplex> model, int number, Pointer<Integer> which);
	/**
	 * Original signature : <code>void Clp_addColumns(Clp_Simplex*, int, const double*, const double*, const double*, const int*, const int*, const double*)</code><br>
	 * <i>native declaration : line 123</i>
	 */
	@Name("Clp_addColumns") 
	public static native void clpAddColumns(Pointer<CLPSimplex> model, int number, Pointer<Double> columnLower, Pointer<Double> columnUpper, Pointer<Double> objective, Pointer<Integer> columnStarts, Pointer<Integer> rows, Pointer<Double> elements);
	/**
	 * Original signature : <code>void Clp_chgRowLower(Clp_Simplex*, const double*)</code><br>
	 * <i>native declaration : line 129</i>
	 */
	@Name("Clp_chgRowLower") 
	public static native void clpChgRowLower(Pointer<CLPSimplex> model, Pointer<Double> rowLower);
	/**
	 * Original signature : <code>void Clp_chgRowUpper(Clp_Simplex*, const double*)</code><br>
	 * <i>native declaration : line 131</i>
	 */
	@Name("Clp_chgRowUpper") 
	public static native void clpChgRowUpper(Pointer<CLPSimplex> model, Pointer<Double> rowUpper);
	/**
	 * Original signature : <code>void Clp_chgColumnLower(Clp_Simplex*, const double*)</code><br>
	 * <i>native declaration : line 133</i>
	 */
	@Name("Clp_chgColumnLower") 
	public static native void clpChgColumnLower(Pointer<CLPSimplex> model, Pointer<Double> columnLower);
	/**
	 * Original signature : <code>void Clp_chgColumnUpper(Clp_Simplex*, const double*)</code><br>
	 * <i>native declaration : line 135</i>
	 */
	@Name("Clp_chgColumnUpper") 
	public static native void clpChgColumnUpper(Pointer<CLPSimplex> model, Pointer<Double> columnUpper);
	/**
	 * Original signature : <code>void Clp_chgObjCoefficients(Clp_Simplex*, const double*)</code><br>
	 * <i>native declaration : line 137</i>
	 */
	@Name("Clp_chgObjCoefficients") 
	public static native void clpChgObjCoefficients(Pointer<CLPSimplex> model, Pointer<Double> objIn);
	/**
	 * Original signature : <code>void Clp_dropNames(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 139</i>
	 */
	@Name("Clp_dropNames") 
	public static native void clpDropNames(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>void Clp_copyNames(Clp_Simplex*, const const char**, const const char**)</code><br>
	 * <i>native declaration : line 141</i>
	 */
	@Name("Clp_copyNames") 
	public static native void clpCopyNames(Pointer<CLPSimplex> model, Pointer<Pointer<Byte>> rowNames, Pointer<Pointer<Byte>> columnNames);
	/**
	 * Original signature : <code>int Clp_numberRows(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 148</i>
	 */
	@Name("Clp_numberRows") 
	public static native int clpNumberRows(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>int Clp_numberColumns(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 150</i>
	 */
	@Name("Clp_numberColumns") 
	public static native int clpNumberColumns(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>double Clp_primalTolerance(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 152</i>
	 */
	@Name("Clp_primalTolerance") 
	public static native double clpPrimalTolerance(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>void Clp_setPrimalTolerance(Clp_Simplex*, double)</code><br>
	 * <i>native declaration : line 153</i>
	 */
	@Name("Clp_setPrimalTolerance") 
	public static native void clpSetPrimalTolerance(Pointer<CLPSimplex> model, double value);
	/**
	 * Original signature : <code>double Clp_dualTolerance(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 155</i>
	 */
	@Name("Clp_dualTolerance") 
	public static native double clpDualTolerance(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>void Clp_setDualTolerance(Clp_Simplex*, double)</code><br>
	 * <i>native declaration : line 156</i>
	 */
	@Name("Clp_setDualTolerance") 
	public static native void clpSetDualTolerance(Pointer<CLPSimplex> model, double value);
	/**
	 * Original signature : <code>double Clp_dualObjectiveLimit(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 158</i>
	 */
	@Name("Clp_dualObjectiveLimit") 
	public static native double clpDualObjectiveLimit(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>void Clp_setDualObjectiveLimit(Clp_Simplex*, double)</code><br>
	 * <i>native declaration : line 159</i>
	 */
	@Name("Clp_setDualObjectiveLimit") 
	public static native void clpSetDualObjectiveLimit(Pointer<CLPSimplex> model, double value);
	/**
	 * Original signature : <code>double Clp_objectiveOffset(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 161</i>
	 */
	@Name("Clp_objectiveOffset") 
	public static native double clpObjectiveOffset(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>void Clp_setObjectiveOffset(Clp_Simplex*, double)</code><br>
	 * <i>native declaration : line 162</i>
	 */
	@Name("Clp_setObjectiveOffset") 
	public static native void clpSetObjectiveOffset(Pointer<CLPSimplex> model, double value);
	/**
	 * Original signature : <code>void Clp_problemName(Clp_Simplex*, int, char*)</code><br>
	 * <i>native declaration : line 164</i>
	 */
	@Name("Clp_problemName") 
	public static native void clpProblemName(Pointer<CLPSimplex> model, int maxNumberCharacters, Pointer<Byte> array);
	/**
	 * Original signature : <code>COINLINKAGE Clp_setProblemName(Clp_Simplex*, int, char*)</code><br>
	 * <i>native declaration : line 166</i>
	 */
	@Name("Clp_setProblemName") 
	public static native int clpSetProblemName(Pointer<CLPSimplex> model, int maxNumberCharacters, Pointer<Byte> array);
	/**
	 * Original signature : <code>int Clp_numberIterations(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 169</i>
	 */
	@Name("Clp_numberIterations") 
	public static native int clpNumberIterations(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>void Clp_setNumberIterations(Clp_Simplex*, int)</code><br>
	 * <i>native declaration : line 170</i>
	 */
	@Name("Clp_setNumberIterations") 
	public static native void clpSetNumberIterations(Pointer<CLPSimplex> model, int numberIterations);
	/**
	 * Original signature : <code>int maximumIterations(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 172</i>
	 */
	public static native int maximumIterations(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>void Clp_setMaximumIterations(Clp_Simplex*, int)</code><br>
	 * <i>native declaration : line 173</i>
	 */
	@Name("Clp_setMaximumIterations") 
	public static native void clpSetMaximumIterations(Pointer<CLPSimplex> model, int value);
	/**
	 * Original signature : <code>double Clp_maximumSeconds(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 175</i>
	 */
	@Name("Clp_maximumSeconds") 
	public static native double clpMaximumSeconds(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>void Clp_setMaximumSeconds(Clp_Simplex*, double)</code><br>
	 * <i>native declaration : line 176</i>
	 */
	@Name("Clp_setMaximumSeconds") 
	public static native void clpSetMaximumSeconds(Pointer<CLPSimplex> model, double value);
	/**
	 * Original signature : <code>int Clp_hitMaximumIterations(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 178</i>
	 */
	@Name("Clp_hitMaximumIterations") 
	public static native int clpHitMaximumIterations(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>int Clp_status(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 186</i>
	 */
	@Name("Clp_status") 
	public static native int clpStatus(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>void Clp_setProblemStatus(Clp_Simplex*, int)</code><br>
	 * <i>native declaration : line 188</i>
	 */
	@Name("Clp_setProblemStatus") 
	public static native void clpSetProblemStatus(Pointer<CLPSimplex> model, int problemStatus);
	/**
	 * Original signature : <code>int Clp_secondaryStatus(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 196</i>
	 */
	@Name("Clp_secondaryStatus") 
	public static native int clpSecondaryStatus(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>void Clp_setSecondaryStatus(Clp_Simplex*, int)</code><br>
	 * <i>native declaration : line 197</i>
	 */
	@Name("Clp_setSecondaryStatus") 
	public static native void clpSetSecondaryStatus(Pointer<CLPSimplex> model, int status);
	/**
	 * Original signature : <code>double Clp_optimizationDirection(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 199</i>
	 */
	@Name("Clp_optimizationDirection") 
	public static native double clpOptimizationDirection(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>void Clp_setOptimizationDirection(Clp_Simplex*, double)</code><br>
	 * <i>native declaration : line 200</i>
	 */
	@Name("Clp_setOptimizationDirection") 
	public static native void clpSetOptimizationDirection(Pointer<CLPSimplex> model, double value);
	/**
	 * Original signature : <code>double* Clp_primalRowSolution(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 202</i>
	 */
	@Name("Clp_primalRowSolution") 
	public static native Pointer<Double> clpPrimalRowSolution(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>double* Clp_primalColumnSolution(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 204</i>
	 */
	@Name("Clp_primalColumnSolution") 
	public static native Pointer<Double> clpPrimalColumnSolution(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>double* Clp_dualRowSolution(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 206</i>
	 */
	@Name("Clp_dualRowSolution") 
	public static native Pointer<Double> clpDualRowSolution(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>double* Clp_dualColumnSolution(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 208</i>
	 */
	@Name("Clp_dualColumnSolution") 
	public static native Pointer<Double> clpDualColumnSolution(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>double* Clp_rowLower(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 210</i>
	 */
	@Name("Clp_rowLower") 
	public static native Pointer<Double> clpRowLower(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>double* Clp_rowUpper(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 212</i>
	 */
	@Name("Clp_rowUpper") 
	public static native Pointer<Double> clpRowUpper(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>double* Clp_objective(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 214</i>
	 */
	@Name("Clp_objective") 
	public static native Pointer<Double> clpObjective(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>double* Clp_columnLower(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 216</i>
	 */
	@Name("Clp_columnLower") 
	public static native Pointer<Double> clpColumnLower(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>double* Clp_columnUpper(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 218</i>
	 */
	@Name("Clp_columnUpper") 
	public static native Pointer<Double> clpColumnUpper(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>int Clp_getNumElements(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 220</i>
	 */
	@Name("Clp_getNumElements") 
	public static native int clpGetNumElements(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>CoinBigIndex* Clp_getVectorStarts(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 222</i>
	 */
	@Name("Clp_getVectorStarts") 
	public static native Pointer<Integer> clpGetVectorStarts(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>int* Clp_getIndices(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 224</i>
	 */
	@Name("Clp_getIndices") 
	public static native Pointer<Integer> clpGetIndices(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>int* Clp_getVectorLengths(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 226</i>
	 */
	@Name("Clp_getVectorLengths") 
	public static native Pointer<Integer> clpGetVectorLengths(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>double* Clp_getElements(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 228</i>
	 */
	@Name("Clp_getElements") 
	public static native Pointer<Double> clpGetElements(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>double Clp_objectiveValue(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 230</i>
	 */
	@Name("Clp_objectiveValue") 
	public static native double clpObjectiveValue(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>char* Clp_integerInformation(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 232</i>
	 */
	@Name("Clp_integerInformation") 
	public static native Pointer<Byte> clpIntegerInformation(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>double* Clp_infeasibilityRay(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 239</i>
	 */
	@Name("Clp_infeasibilityRay") 
	public static native Pointer<Double> clpInfeasibilityRay(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>double* Clp_unboundedRay(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 246</i>
	 */
	@Name("Clp_unboundedRay") 
	public static native Pointer<Double> clpUnboundedRay(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>void Clp_freeRay(Clp_Simplex*, double*)</code><br>
	 * <i>native declaration : line 248</i>
	 */
	@Name("Clp_freeRay") 
	public static native void clpFreeRay(Pointer<CLPSimplex> model, Pointer<Double> ray);
	/**
	 * Original signature : <code>int Clp_statusExists(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 250</i>
	 */
	@Name("Clp_statusExists") 
	public static native int clpStatusExists(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>char* Clp_statusArray(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 252</i>
	 */
	@Name("Clp_statusArray") 
	public static native Pointer<Byte> clpStatusArray(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>void Clp_copyinStatus(Clp_Simplex*, const unsigned char*)</code><br>
	 * <i>native declaration : line 254</i>
	 */
	@Name("Clp_copyinStatus") 
	public static native void clpCopyinStatus(Pointer<CLPSimplex> model, Pointer<Byte> statusArray);
	/**
	 * Original signature : <code>int Clp_getColumnStatus(Clp_Simplex*, int)</code><br>
	 * <i>native declaration : line 258</i>
	 */
	@Name("Clp_getColumnStatus") 
	public static native int clpGetColumnStatus(Pointer<CLPSimplex> model, int sequence);
	/**
	 * Original signature : <code>int Clp_getRowStatus(Clp_Simplex*, int)</code><br>
	 * <i>native declaration : line 260</i>
	 */
	@Name("Clp_getRowStatus") 
	public static native int clpGetRowStatus(Pointer<CLPSimplex> model, int sequence);
	/**
	 * Original signature : <code>void Clp_setColumnStatus(Clp_Simplex*, int, int)</code><br>
	 * <i>native declaration : line 262</i>
	 */
	@Name("Clp_setColumnStatus") 
	public static native void clpSetColumnStatus(Pointer<CLPSimplex> model, int sequence, int value);
	/**
	 * Original signature : <code>void Clp_setRowStatus(Clp_Simplex*, int, int)</code><br>
	 * <i>native declaration : line 265</i>
	 */
	@Name("Clp_setRowStatus") 
	public static native void clpSetRowStatus(Pointer<CLPSimplex> model, int sequence, int value);
	/**
	 * Original signature : <code>void Clp_setUserPointer(Clp_Simplex*, void*)</code><br>
	 * <i>native declaration : line 269</i>
	 */
	@Name("Clp_setUserPointer") 
	public static native void clpSetUserPointer(Pointer<CLPSimplex> model, Pointer<CLPSolve> pointer);
	/**
	 * Original signature : <code>void* Clp_getUserPointer(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 270</i>
	 */
	@Name("Clp_getUserPointer") 
	public static native Pointer<CLPSolve> clpGetUserPointer(Pointer<CLPSimplex> model);
//	/**
//	 * Original signature : <code>void Clp_registerCallBack(Clp_Simplex*, clp_callback)</code><br>
//	 * <i>native declaration : line 276</i>
//	 */
//	@Name("Clp_registerCallBack") 
//	public static native void clpRegisterCallBack(Pointer<CLPLibrary.Clp_Simplex> model, CLPLibrary.clp_callback userCallBack);
	/**
	 * Original signature : <code>void Clp_clearCallBack(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 279</i>
	 */
	@Name("Clp_clearCallBack") 
	public static native void clpClearCallBack(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>void Clp_setLogLevel(Clp_Simplex*, int)</code><br>
	 * <i>native declaration : line 288</i>
	 */
	@Name("Clp_setLogLevel") 
	public static native void clpSetLogLevel(Pointer<CLPSimplex> model, int value);
	/**
	 * Original signature : <code>int Clp_logLevel(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 289</i>
	 */
	@Name("Clp_logLevel") 
	public static native int clpLogLevel(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>int Clp_lengthNames(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 291</i>
	 */
	@Name("Clp_lengthNames") 
	public static native int clpLengthNames(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>void Clp_rowName(Clp_Simplex*, int, char*)</code><br>
	 * <i>native declaration : line 293</i>
	 */
	@Name("Clp_rowName") 
	public static native void clpRowName(Pointer<CLPSimplex> model, int iRow, Pointer<Byte> name);
	/**
	 * Original signature : <code>void Clp_columnName(Clp_Simplex*, int, char*)</code><br>
	 * <i>native declaration : line 295</i>
	 */
	@Name("Clp_columnName") 
	public static native void clpColumnName(Pointer<CLPSimplex> model, int iColumn, Pointer<Byte> name);
	/**
	 * Original signature : <code>int Clp_initialSolve(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 305</i>
	 */
	@Name("Clp_initialSolve") 
	public static native int clpInitialSolve(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>int Clp_initialSolveWithOptions(Clp_Simplex*, Clp_Solve*)</code><br>
	 * <i>native declaration : line 307</i>
	 */
	@Name("Clp_initialSolveWithOptions") 
	public static native int clpInitialSolveWithOptions(Pointer<CLPSimplex> model, Pointer<CLPSolve> Clp_SolvePtr1);
	/**
	 * Original signature : <code>int Clp_initialDualSolve(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 309</i>
	 */
	@Name("Clp_initialDualSolve") 
	public static native int clpInitialDualSolve(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>int Clp_initialPrimalSolve(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 311</i>
	 */
	@Name("Clp_initialPrimalSolve") 
	public static native int clpInitialPrimalSolve(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>int Clp_initialBarrierSolve(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 313</i>
	 */
	@Name("Clp_initialBarrierSolve") 
	public static native int clpInitialBarrierSolve(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>int Clp_initialBarrierNoCrossSolve(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 315</i>
	 */
	@Name("Clp_initialBarrierNoCrossSolve") 
	public static native int clpInitialBarrierNoCrossSolve(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>int Clp_dual(Clp_Simplex*, int)</code><br>
	 * <i>native declaration : line 317</i>
	 */
	@Name("Clp_dual") 
	public static native int clpDual(Pointer<CLPSimplex> model, int ifValuesPass);
	/**
	 * Original signature : <code>int Clp_primal(Clp_Simplex*, int)</code><br>
	 * <i>native declaration : line 319</i>
	 */
	@Name("Clp_primal") 
	public static native int clpPrimal(Pointer<CLPSimplex> model, int ifValuesPass);
	/**
	 * Original signature : <code>void Clp_idiot(Clp_Simplex*, int)</code><br>
	 * <i>native declaration : line 322</i>
	 */
	@Name("Clp_idiot") 
	public static native void clpIdiot(Pointer<CLPSimplex> model, int tryhard);
	/**
	 * Original signature : <code>void Clp_scaling(Clp_Simplex*, int)</code><br>
	 * <i>native declaration : line 325</i>
	 */
	@Name("Clp_scaling") 
	public static native void clpScaling(Pointer<CLPSimplex> model, int mode);
	/**
	 * Original signature : <code>int Clp_scalingFlag(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 327</i>
	 */
	@Name("Clp_scalingFlag") 
	public static native int clpScalingFlag(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>int Clp_crash(Clp_Simplex*, double, int)</code><br>
	 * <i>native declaration : line 342</i>
	 */
	@Name("Clp_crash") 
	public static native int clpCrash(Pointer<CLPSimplex> model, double gap, int pivot);
	/**
	 * Original signature : <code>int Clp_primalFeasible(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 349</i>
	 */
	@Name("Clp_primalFeasible") 
	public static native int clpPrimalFeasible(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>int Clp_dualFeasible(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 351</i>
	 */
	@Name("Clp_dualFeasible") 
	public static native int clpDualFeasible(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>double Clp_dualBound(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 353</i>
	 */
	@Name("Clp_dualBound") 
	public static native double clpDualBound(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>void Clp_setDualBound(Clp_Simplex*, double)</code><br>
	 * <i>native declaration : line 354</i>
	 */
	@Name("Clp_setDualBound") 
	public static native void clpSetDualBound(Pointer<CLPSimplex> model, double value);
	/**
	 * Original signature : <code>double Clp_infeasibilityCost(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 356</i>
	 */
	@Name("Clp_infeasibilityCost") 
	public static native double clpInfeasibilityCost(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>void Clp_setInfeasibilityCost(Clp_Simplex*, double)</code><br>
	 * <i>native declaration : line 357</i>
	 */
	@Name("Clp_setInfeasibilityCost") 
	public static native void clpSetInfeasibilityCost(Pointer<CLPSimplex> model, double value);
	/**
	 * Original signature : <code>int Clp_perturbation(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 366</i>
	 */
	@Name("Clp_perturbation") 
	public static native int clpPerturbation(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>void Clp_setPerturbation(Clp_Simplex*, int)</code><br>
	 * <i>native declaration : line 367</i>
	 */
	@Name("Clp_setPerturbation") 
	public static native void clpSetPerturbation(Pointer<CLPSimplex> model, int value);
	/**
	 * Original signature : <code>int Clp_algorithm(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 369</i>
	 */
	@Name("Clp_algorithm") 
	public static native int clpAlgorithm(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>void Clp_setAlgorithm(Clp_Simplex*, int)</code><br>
	 * <i>native declaration : line 371</i>
	 */
	@Name("Clp_setAlgorithm") 
	public static native void clpSetAlgorithm(Pointer<CLPSimplex> model, int value);
	/**
	 * Original signature : <code>double Clp_sumDualInfeasibilities(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 373</i>
	 */
	@Name("Clp_sumDualInfeasibilities") 
	public static native double clpSumDualInfeasibilities(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>int Clp_numberDualInfeasibilities(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 375</i>
	 */
	@Name("Clp_numberDualInfeasibilities") 
	public static native int clpNumberDualInfeasibilities(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>double Clp_sumPrimalInfeasibilities(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 377</i>
	 */
	@Name("Clp_sumPrimalInfeasibilities") 
	public static native double clpSumPrimalInfeasibilities(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>int Clp_numberPrimalInfeasibilities(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 379</i>
	 */
	@Name("Clp_numberPrimalInfeasibilities") 
	public static native int clpNumberPrimalInfeasibilities(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>int Clp_saveModel(Clp_Simplex*, const char*)</code><br>
	 * <i>native declaration : line 386</i>
	 */
	@Name("Clp_saveModel") 
	public static native int clpSaveModel(Pointer<CLPSimplex> model, Pointer<Byte> fileName);
	/**
	 * Original signature : <code>int Clp_restoreModel(Clp_Simplex*, const char*)</code><br>
	 * <i>native declaration : line 389</i>
	 */
	@Name("Clp_restoreModel") 
	public static native int clpRestoreModel(Pointer<CLPSimplex> model, Pointer<Byte> fileName);
	/**
	 * Original signature : <code>void Clp_checkSolution(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 393</i>
	 */
	@Name("Clp_checkSolution") 
	public static native void clpCheckSolution(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>int Clp_getNumRows(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 400</i>
	 */
	@Name("Clp_getNumRows") 
	public static native int clpGetNumRows(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>int Clp_getNumCols(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 402</i>
	 */
	@Name("Clp_getNumCols") 
	public static native int clpGetNumCols(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>int Clp_getIterationCount(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 404</i>
	 */
	@Name("Clp_getIterationCount") 
	public static native int clpGetIterationCount(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>int Clp_isAbandoned(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 406</i>
	 */
	@Name("Clp_isAbandoned") 
	public static native int clpIsAbandoned(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>int Clp_isProvenOptimal(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 408</i>
	 */
	@Name("Clp_isProvenOptimal") 
	public static native int clpIsProvenOptimal(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>int Clp_isProvenPrimalInfeasible(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 410</i>
	 */
	@Name("Clp_isProvenPrimalInfeasible") 
	public static native int clpIsProvenPrimalInfeasible(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>int Clp_isProvenDualInfeasible(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 412</i>
	 */
	@Name("Clp_isProvenDualInfeasible") 
	public static native int clpIsProvenDualInfeasible(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>int Clp_isPrimalObjectiveLimitReached(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 414</i>
	 */
	@Name("Clp_isPrimalObjectiveLimitReached") 
	public static native int clpIsPrimalObjectiveLimitReached(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>int Clp_isDualObjectiveLimitReached(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 416</i>
	 */
	@Name("Clp_isDualObjectiveLimitReached") 
	public static native int clpIsDualObjectiveLimitReached(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>int Clp_isIterationLimitReached(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 418</i>
	 */
	@Name("Clp_isIterationLimitReached") 
	public static native int clpIsIterationLimitReached(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>double Clp_getObjSense(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 420</i>
	 */
	@Name("Clp_getObjSense") 
	public static native double clpGetObjSense(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>void Clp_setObjSense(Clp_Simplex*, double)</code><br>
	 * <i>native declaration : line 422</i>
	 */
	@Name("Clp_setObjSense") 
	public static native void clpSetObjSense(Pointer<CLPSimplex> model, double objsen);
	/**
	 * Original signature : <code>double* Clp_getRowActivity(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 424</i>
	 */
	@Name("Clp_getRowActivity") 
	public static native Pointer<Double> clpGetRowActivity(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>double* Clp_getColSolution(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 426</i>
	 */
	@Name("Clp_getColSolution") 
	public static native Pointer<Double> clpGetColSolution(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>void Clp_setColSolution(Clp_Simplex*, const double*)</code><br>
	 * <i>native declaration : line 427</i>
	 */
	@Name("Clp_setColSolution") 
	public static native void clpSetColSolution(Pointer<CLPSimplex> model, Pointer<Double> input);
	/**
	 * Original signature : <code>double* Clp_getRowPrice(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 429</i>
	 */
	@Name("Clp_getRowPrice") 
	public static native Pointer<Double> clpGetRowPrice(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>double* Clp_getReducedCost(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 431</i>
	 */
	@Name("Clp_getReducedCost") 
	public static native Pointer<Double> clpGetReducedCost(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>double* Clp_getRowLower(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 433</i>
	 */
	@Name("Clp_getRowLower") 
	public static native Pointer<Double> clpGetRowLower(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>double* Clp_getRowUpper(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 435</i>
	 */
	@Name("Clp_getRowUpper") 
	public static native Pointer<Double> clpGetRowUpper(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>double* Clp_getObjCoefficients(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 437</i>
	 */
	@Name("Clp_getObjCoefficients") 
	public static native Pointer<Double> clpGetObjCoefficients(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>double* Clp_getColLower(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 439</i>
	 */
	@Name("Clp_getColLower") 
	public static native Pointer<Double> clpGetColLower(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>double* Clp_getColUpper(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 441</i>
	 */
	@Name("Clp_getColUpper") 
	public static native Pointer<Double> clpGetColUpper(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>double Clp_getObjValue(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 443</i>
	 */
	@Name("Clp_getObjValue") 
	public static native double clpGetObjValue(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>void Clp_printModel(Clp_Simplex*, const char*)</code><br>
	 * <i>native declaration : line 445</i>
	 */
	@Name("Clp_printModel") 
	public static native void clpPrintModel(Pointer<CLPSimplex> model, Pointer<Byte> prefix);
	/**
	 * Original signature : <code>double Clp_getSmallElementValue(Clp_Simplex*)</code><br>
	 * <i>native declaration : line 448</i>
	 */
	@Name("Clp_getSmallElementValue") 
	public static native double clpGetSmallElementValue(Pointer<CLPSimplex> model);
	/**
	 * Original signature : <code>void Clp_setSmallElementValue(Clp_Simplex*, double)</code><br>
	 * <i>native declaration : line 449</i>
	 */
	@Name("Clp_setSmallElementValue") 
	public static native void clpSetSmallElementValue(Pointer<CLPSimplex> model, double value);
	/**
	 * Original signature : <code>void ClpSolve_setSpecialOption(Clp_Solve*, int, int, int)</code><br>
	 * <i>native declaration : line 456</i>
	 */
	@Name("ClpSolve_setSpecialOption") 
	public static native void clpSolveSetSpecialOption(Pointer<CLPSolve> Clp_SolvePtr1, int which, int value, int extraInfo);
	/**
	 * Original signature : <code>int ClpSolve_getSpecialOption(Clp_Solve*, int)</code><br>
	 * <i>native declaration : line 457</i>
	 */
	@Name("ClpSolve_getSpecialOption") 
	public static native int clpSolveGetSpecialOption(Pointer<CLPSolve> Clp_SolvePtr1, int which);
	/**
	 * Original signature : <code>void ClpSolve_setSolveType(Clp_Solve*, int, int)</code><br>
	 * <i>native declaration : line 468</i>
	 */
	@Name("ClpSolve_setSolveType") 
	public static native void clpSolveSetSolveType(Pointer<CLPSolve> Clp_SolvePtr1, int method, int extraInfo);
	/**
	 * Original signature : <code>int ClpSolve_getSolveType(Clp_Solve*)</code><br>
	 * <i>native declaration : line 469</i>
	 */
	@Name("ClpSolve_getSolveType") 
	public static native int clpSolveGetSolveType(Pointer<CLPSolve> Clp_SolvePtr1);
	/**
	 * Original signature : <code>void ClpSolve_setPresolveType(Clp_Solve*, int, int)</code><br>
	 * <i>native declaration : line 477</i>
	 */
	@Name("ClpSolve_setPresolveType") 
	public static native void clpSolveSetPresolveType(Pointer<CLPSolve> Clp_SolvePtr1, int amount, int extraInfo);
	/**
	 * Original signature : <code>int ClpSolve_getPresolveType(Clp_Solve*)</code><br>
	 * <i>native declaration : line 478</i>
	 */
	@Name("ClpSolve_getPresolveType") 
	public static native int clpSolveGetPresolveType(Pointer<CLPSolve> Clp_SolvePtr1);
	/**
	 * Original signature : <code>int ClpSolve_getPresolvePasses(Clp_Solve*)</code><br>
	 * <i>native declaration : line 480</i>
	 */
	@Name("ClpSolve_getPresolvePasses") 
	public static native int clpSolveGetPresolvePasses(Pointer<CLPSolve> Clp_SolvePtr1);
	/**
	 * Original signature : <code>int ClpSolve_getExtraInfo(Clp_Solve*, int)</code><br>
	 * <i>native declaration : line 481</i>
	 */
	@Name("ClpSolve_getExtraInfo") 
	public static native int clpSolveGetExtraInfo(Pointer<CLPSolve> Clp_SolvePtr1, int which);
	/**
	 * Original signature : <code>void ClpSolve_setInfeasibleReturn(Clp_Solve*, int)</code><br>
	 * <i>native declaration : line 482</i>
	 */
	@Name("ClpSolve_setInfeasibleReturn") 
	public static native void clpSolveSetInfeasibleReturn(Pointer<CLPSolve> Clp_SolvePtr1, int trueFalse);
	/**
	 * Original signature : <code>int ClpSolve_infeasibleReturn(Clp_Solve*)</code><br>
	 * <i>native declaration : line 483</i>
	 */
	@Name("ClpSolve_infeasibleReturn") 
	public static native int clpSolveInfeasibleReturn(Pointer<CLPSolve> Clp_SolvePtr1);
	/**
	 * Original signature : <code>int ClpSolve_doDual(Clp_Solve*)</code><br>
	 * <i>native declaration : line 485</i>
	 */
	@Name("ClpSolve_doDual") 
	public static native int clpSolveDoDual(Pointer<CLPSolve> Clp_SolvePtr1);
	/**
	 * Original signature : <code>void ClpSolve_setDoDual(Clp_Solve*, int)</code><br>
	 * <i>native declaration : line 486</i>
	 */
	@Name("ClpSolve_setDoDual") 
	public static native void clpSolveSetDoDual(Pointer<CLPSolve> Clp_SolvePtr1, int doDual);
	/**
	 * Original signature : <code>int ClpSolve_doSingleton(Clp_Solve*)</code><br>
	 * <i>native declaration : line 488</i>
	 */
	@Name("ClpSolve_doSingleton") 
	public static native int clpSolveDoSingleton(Pointer<CLPSolve> Clp_SolvePtr1);
	/**
	 * Original signature : <code>void ClpSolve_setDoSingleton(Clp_Solve*, int)</code><br>
	 * <i>native declaration : line 489</i>
	 */
	@Name("ClpSolve_setDoSingleton") 
	public static native void clpSolveSetDoSingleton(Pointer<CLPSolve> Clp_SolvePtr1, int doSingleton);
	/**
	 * Original signature : <code>int ClpSolve_doDoubleton(Clp_Solve*)</code><br>
	 * <i>native declaration : line 491</i>
	 */
	@Name("ClpSolve_doDoubleton") 
	public static native int clpSolveDoDoubleton(Pointer<CLPSolve> Clp_SolvePtr1);
	/**
	 * Original signature : <code>void ClpSolve_setDoDoubleton(Clp_Solve*, int)</code><br>
	 * <i>native declaration : line 492</i>
	 */
	@Name("ClpSolve_setDoDoubleton") 
	public static native void clpSolveSetDoDoubleton(Pointer<CLPSolve> Clp_SolvePtr1, int doDoubleton);
	/**
	 * Original signature : <code>int ClpSolve_doTripleton(Clp_Solve*)</code><br>
	 * <i>native declaration : line 494</i>
	 */
	@Name("ClpSolve_doTripleton") 
	public static native int clpSolveDoTripleton(Pointer<CLPSolve> Clp_SolvePtr1);
	/**
	 * Original signature : <code>void ClpSolve_setDoTripleton(Clp_Solve*, int)</code><br>
	 * <i>native declaration : line 495</i>
	 */
	@Name("ClpSolve_setDoTripleton") 
	public static native void clpSolveSetDoTripleton(Pointer<CLPSolve> Clp_SolvePtr1, int doTripleton);
	/**
	 * Original signature : <code>int ClpSolve_doTighten(Clp_Solve*)</code><br>
	 * <i>native declaration : line 497</i>
	 */
	@Name("ClpSolve_doTighten") 
	public static native int clpSolveDoTighten(Pointer<CLPSolve> Clp_SolvePtr1);
	/**
	 * Original signature : <code>void ClpSolve_setDoTighten(Clp_Solve*, int)</code><br>
	 * <i>native declaration : line 498</i>
	 */
	@Name("ClpSolve_setDoTighten") 
	public static native void clpSolveSetDoTighten(Pointer<CLPSolve> Clp_SolvePtr1, int doTighten);
	/**
	 * Original signature : <code>int ClpSolve_doForcing(Clp_Solve*)</code><br>
	 * <i>native declaration : line 500</i>
	 */
	@Name("ClpSolve_doForcing") 
	public static native int clpSolveDoForcing(Pointer<CLPSolve> Clp_SolvePtr1);
	/**
	 * Original signature : <code>void ClpSolve_setDoForcing(Clp_Solve*, int)</code><br>
	 * <i>native declaration : line 501</i>
	 */
	@Name("ClpSolve_setDoForcing") 
	public static native void clpSolveSetDoForcing(Pointer<CLPSolve> Clp_SolvePtr1, int doForcing);
	/**
	 * Original signature : <code>int ClpSolve_doImpliedFree(Clp_Solve*)</code><br>
	 * <i>native declaration : line 503</i>
	 */
	@Name("ClpSolve_doImpliedFree") 
	public static native int clpSolveDoImpliedFree(Pointer<CLPSolve> Clp_SolvePtr1);
	/**
	 * Original signature : <code>void ClpSolve_setDoImpliedFree(Clp_Solve*, int)</code><br>
	 * <i>native declaration : line 504</i>
	 */
	@Name("ClpSolve_setDoImpliedFree") 
	public static native void clpSolveSetDoImpliedFree(Pointer<CLPSolve> Clp_SolvePtr1, int doImpliedFree);
	/**
	 * Original signature : <code>int ClpSolve_doDupcol(Clp_Solve*)</code><br>
	 * <i>native declaration : line 506</i>
	 */
	@Name("ClpSolve_doDupcol") 
	public static native int clpSolveDoDupcol(Pointer<CLPSolve> Clp_SolvePtr1);
	/**
	 * Original signature : <code>void ClpSolve_setDoDupcol(Clp_Solve*, int)</code><br>
	 * <i>native declaration : line 507</i>
	 */
	@Name("ClpSolve_setDoDupcol") 
	public static native void clpSolveSetDoDupcol(Pointer<CLPSolve> Clp_SolvePtr1, int doDupcol);
	/**
	 * Original signature : <code>int ClpSolve_doDuprow(Clp_Solve*)</code><br>
	 * <i>native declaration : line 509</i>
	 */
	@Name("ClpSolve_doDuprow") 
	public static native int clpSolveDoDuprow(Pointer<CLPSolve> Clp_SolvePtr1);
	/**
	 * Original signature : <code>void ClpSolve_setDoDuprow(Clp_Solve*, int)</code><br>
	 * <i>native declaration : line 510</i>
	 */
	@Name("ClpSolve_setDoDuprow") 
	public static native void clpSolveSetDoDuprow(Pointer<CLPSolve> Clp_SolvePtr1, int doDuprow);
	/**
	 * Original signature : <code>int ClpSolve_doSingletonColumn(Clp_Solve*)</code><br>
	 * <i>native declaration : line 512</i>
	 */
	@Name("ClpSolve_doSingletonColumn") 
	public static native int clpSolveDoSingletonColumn(Pointer<CLPSolve> Clp_SolvePtr1);
	/**
	 * Original signature : <code>void ClpSolve_setDoSingletonColumn(Clp_Solve*, int)</code><br>
	 * <i>native declaration : line 513</i>
	 */
	@Name("ClpSolve_setDoSingletonColumn") 
	public static native void clpSolveSetDoSingletonColumn(Pointer<CLPSolve> Clp_SolvePtr1, int doSingleton);
	/**
	 * Original signature : <code>int ClpSolve_presolveActions(Clp_Solve*)</code><br>
	 * <i>native declaration : line 515</i>
	 */
	@Name("ClpSolve_presolveActions") 
	public static native int clpSolvePresolveActions(Pointer<CLPSolve> Clp_SolvePtr1);
	/**
	 * Original signature : <code>void ClpSolve_setPresolveActions(Clp_Solve*, int)</code><br>
	 * <i>native declaration : line 516</i>
	 */
	@Name("ClpSolve_setPresolveActions") 
	public static native void clpSolveSetPresolveActions(Pointer<CLPSolve> Clp_SolvePtr1, int action);
	/**
	 * Original signature : <code>int ClpSolve_substitution(Clp_Solve*)</code><br>
	 * <i>native declaration : line 518</i>
	 */
	@Name("ClpSolve_substitution") 
	public static native int clpSolveSubstitution(Pointer<CLPSolve> Clp_SolvePtr1);
	/**
	 * Original signature : <code>void ClpSolve_setSubstitution(Clp_Solve*, int)</code><br>
	 * <i>native declaration : line 519</i>
	 */
	@Name("ClpSolve_setSubstitution") 
	public static native void clpSolveSetSubstitution(Pointer<CLPSolve> Clp_SolvePtr1, int value);
	/** Undefined type */
	public static interface CLPSimplex {
		
	};
	/** Undefined type */
	public static interface CLPSolve {
		
	};

}
